from vulristics_code import (functions_analysis_text,
                             functions_analysis_cpe,
                             functions_source_ms_cve,
                             functions_source_epss_cve,
                             functions_source_nvd_cve,
                             functions_source_vulners,
                             functions_source_bdu,
                             functions_source_attackerkb_cve,
                             functions_source_custom_cve,
                             functions_tools,
                             data_classification_vulnerability_types)
import credentials
import re
import os
import json
import html
import copy

reuse_combined = False

def add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all, cves_to_exclude, source_config):
    if "ms" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting MS CVE data...")
        ms_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            ms_cve_data = functions_source_ms_cve.get_ms_cve_data(cve_id, source_config)
            if 'cveTitle' in ms_cve_data['main']:
                if ms_cve_data['main']['cveTitle'] == "RETRACTED":
                    functions_tools.print_debug_message("Adding RETRACTED " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                elif ms_cve_data['not_found_error']:
                    functions_tools.print_debug_message("Adding NOT FOUND " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                else:
                    ms_cve_data_all[cve_id] = ms_cve_data
            n += 1
        cve_data_all['ms_cve_data_all'] = ms_cve_data_all
    return cve_data_all, cves_to_exclude


def add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "nvd" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting NVD CVE data...")
        nvd_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            nvd_cve_data = functions_source_nvd_cve.get_nvd_cve_data(cve_id, source_config)
            nvd_cve_data_all[cve_id] = nvd_cve_data
            n += 1
        cve_data_all['nvd_cve_data_all'] = nvd_cve_data_all
    return cve_data_all

def add_epss_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "epss" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting EPSS CVE data...")
        epss_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            nvd_cve_data = functions_source_epss_cve.get_epss_cve_data(cve_id, source_config)
            epss_cve_data_all[cve_id] = nvd_cve_data
            n += 1
        cve_data_all['epss_cve_data_all'] = epss_cve_data_all
    return cve_data_all


def add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "attackerkb" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting AttackerKB CVE data...")
        attackerkb_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            attackerkb_cve_data = functions_source_attackerkb_cve.get_attackerkb_cve_data(cve_id, source_config)
            attackerkb_cve_data_all[cve_id] = attackerkb_cve_data
            n += 1
        cve_data_all['attackerkb_cve_data_all'] = attackerkb_cve_data_all
    return cve_data_all


def add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "vulners" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting Vulners CVE data...")
        vulners_cve_data_all = dict()
        if credentials.vulners_key != "":  # If we  have Vulners API key
            n = 0
            m = len(all_cves)
            for cve_id in all_cves:
                print(str(n+1) + "/" + str(m) + " - " + cve_id)
                vulners_cve_data = functions_source_vulners.get_vulners_data(cve_id, source_config)
                vulners_cve_data_all[cve_id] = vulners_cve_data
                n+=1
        cve_data_all['vulners_cve_data_all'] = vulners_cve_data_all
    return cve_data_all

def add_bdu_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "bdu" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting BDU CVE data...")
        if source_config['rewrite_flag']:
            print("Updating BDU FSTEC data...")
            functions_source_bdu.download_bdu_file()
            functions_source_bdu.unzip_bdu_file()
            functions_source_bdu.make_bdu_vuln_files()
        bdu_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            bdu_cve_data = functions_source_bdu.get_bdu_data(cve_id, source_config)
            bdu_cve_data_all[cve_id] = bdu_cve_data
            n+=1
        cve_data_all['bdu_cve_data_all'] = bdu_cve_data_all
    return cve_data_all

def add_custom_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config):
    if "custom" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting CUSTOM CVE data...")
        nvd_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            nvd_cve_data = functions_source_custom_cve.get_custom_cve_data(cve_id, source_config)
            nvd_cve_data_all[cve_id] = nvd_cve_data
            n += 1
        cve_data_all['custom_cve_data_all'] = nvd_cve_data_all
    return cve_data_all

def add_combined_cve_data_basic_severity(cve_data_all, cve_id):
    # Combining the data about the Basic Severity
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'basic_severity' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Microsoft title"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'basic_severity' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on NVD description"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'basic_severity' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Vulners description"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = "Unknown Basic Severity"
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_cvss_base_score(cve_data_all, cve_id):
    # Combining the data about the CVSS Base Score
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = ""
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'custom_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['custom_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['custom_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['custom_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to Custom data source"
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to Microsoft data source"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to NVD data source"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to Vulners data source"
    # If there is no data in Vulners, let's get it from BDU description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'bdu_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['bdu_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['bdu_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['bdu_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to BDU data source"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = "Unknown CVSS Base Score"
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = "Detection methods failed"
    return cve_data_all


def get_source_to_full_description(cve_data_all, cve_id):
    '''
    Combining CVE title and description in full_description
    :return:
    '''
    source_to_full_description = dict()
    for source in cve_data_all:
        title = ""
        if cve_id in cve_data_all[source]:
            if 'title' in cve_data_all[source][cve_id]:
                title = cve_data_all[source][cve_id]['title']
        description = ""
        if cve_id in cve_data_all[source]:
            if 'description' in cve_data_all[source][cve_id]:
                description = html.escape(cve_data_all[source][cve_id]['description'])
        full_description = ""
        if title == description or title == "":
            full_description = description
        elif description == "":
            full_description = title
        else:
            full_description = title + ". " + description
        full_description = full_description.replace("  Vulnerability", " Vulnerability")
        source_to_full_description[source] = full_description
    return source_to_full_description

def is_empty_or_only_negative_detection_priorities_or_no_heuristics(all_detected_products):
    # We check that among the detectors there are those whose detection priority is non-negative.
    # Negative priority is used if the keywords are too common. For example, "RPC".
    # If non_negative_detection_priority == False, it is better to add CPE-based detection.
    non_negative_detection_priority = False
    for detected_product in all_detected_products:
        if 'detection_priority' in detected_product['product_data']:
            if detected_product['product_data']['detection_priority'] >= 0:
                non_negative_detection_priority = True
        if 'detection_type' in detected_product:
            if detected_product['detection_type'] == "heuristics_ms":
                non_negative_detection_priority = True
    return non_negative_detection_priority

def add_combined_cve_data_description_product_vuln_type(cve_data_all, product_data,
                                                        alternative_name2product_name,
                                                        known_short_cpes_dict, short_cpe2product_name,
                                                        product_detection_string2product_name,
                                                        vulnerability_type_data, cve_id,
                                                        full_description2detection_results):
    # This function is called for each CVE

    all_detected_products = list()
    all_detected_vuln_types = list()

    # Combining the data about Vulnerability Description
    data_source_text_classification = dict()
    source_to_full_description = get_source_to_full_description(cve_data_all, cve_id)
    max_full_description = ""
    max_full_description_source = ""
    for source in cve_data_all:
        full_description = source_to_full_description[source]
        if len(full_description) > len(max_full_description):
            max_full_description = copy.copy(full_description)
            max_full_description_source = copy.copy(source)
        data_source_text_classification[source] = functions_analysis_text.get_description_type(full_description)

    # The type of vulnerability and the product used can be specified directly in the source.
    # We check this and if so, then we use this type of vulnerability and product, and do not conduct further detection.
    for source in cve_data_all:
        if cve_id in cve_data_all[source]:
            if source_to_full_description[source] == "":
                set_source = max_full_description_source
                set_description = max_full_description
            else:
                set_source = source
                set_description = source_to_full_description[source]
            if "product_name" in cve_data_all[source][cve_id]:
                product_name = cve_data_all[source][cve_id]["product_name"]
                if product_name in product_data:
                    all_detected_products.append({'product': product_name,
                     'source': set_source,
                     'descrpiption': set_description,
                     'detection_type': 'direct',
                     'product_data': copy.copy(product_data[product_name])
                     })
                else:
                    all_detected_products.append({'product': product_name,
                     'source': set_source,
                     'descrpiption': set_description,
                     'detection_type': 'direct',
                     'product_data': copy.copy(product_data["DEFAULT_Directly_Set_product"])
                     })
            if "vulnerability_type" in cve_data_all[source][cve_id]:
                vulnerability_type = cve_data_all[source][cve_id]["vulnerability_type"]
                all_detected_vuln_types.append({'vuln_type': vulnerability_type,
                 'source': set_source,
                 'descrpiption': set_description,
                 'detection_type': 'direct',
                 'vuln_type_data': copy.copy(vulnerability_type_data[vulnerability_type])
                 })

    # The cheapest detection method is to analyze generated vulnerability descriptions generated by the software vendor using a specific template.
    # First of all, this applies to Microsoft vulnerabilities, which have the vulnerable software and the type of vulnerability in their name.
    # Therefore, we first go through the descriptions and classify them as “ms_generated”, “chromium_generated” (maybe I will add other types)

    if all_detected_products == list():
        # I check if ms_generated exists and if so, then I detect the product and type of vulnerability
        for source in cve_data_all:
            if data_source_text_classification[source] == "ms_generated":
                full_description = source_to_full_description[source]
                results = functions_analysis_text.get_vulnerability_type_and_product_from_description_ms_generated(source,
                                                                                      full_description,
                                                                                      product_data,
                                                                                      alternative_name2product_name,
                                                                                      product_detection_string2product_name,
                                                                                      vulnerability_type_data)
                if 'detected_products' in results:
                    all_detected_products += results['detected_products']
                if 'detected_vuln_types' in results:
                    all_detected_vuln_types += results['detected_vuln_types']


    # Detection of a vulnerable product by searching for a substring
    if all_detected_products == list():
        for source in cve_data_all:
            if data_source_text_classification[source] == "general":
                full_description = source_to_full_description[source]
                if full_description in full_description2detection_results:
                    detected_products = full_description2detection_results[full_description]
                else:
                    detected_products = functions_analysis_text.get_products_from_description(source,
                                                                                   full_description,
                                                                                   product_data,
                                                                                   product_detection_string2product_name)

                    full_description2detection_results[full_description] = copy.copy(detected_products)
                all_detected_products += detected_products

    # CPE-based detection
    if not is_empty_or_only_negative_detection_priorities_or_no_heuristics(all_detected_products):
        short_a_cpes = list()
        short_h_cpes = list()
        short_o_cpes = list()
        if 'nvd_cve_data_all' in cve_data_all:
            if 'short_cpes' in cve_data_all['nvd_cve_data_all'][cve_id]:
                for short_cpe in cve_data_all['nvd_cve_data_all'][cve_id]['short_cpes']:
                    if short_cpe[0] == "a":
                        short_a_cpes.append(short_cpe)
                    if short_cpe[0] == "h":
                        short_h_cpes.append(short_cpe)
                    if short_cpe[0] == "o":
                        short_o_cpes.append(short_cpe)

    if not is_empty_or_only_negative_detection_priorities_or_no_heuristics(all_detected_products):
        all_detected_products += functions_analysis_cpe.get_products_by_cpe(short_a_cpes, short_cpe2product_name,
                                                   product_data, known_short_cpes_dict, max_full_description)
    if not is_empty_or_only_negative_detection_priorities_or_no_heuristics(all_detected_products):
        all_detected_products += functions_analysis_cpe.get_products_by_cpe(short_h_cpes, short_cpe2product_name,
                                                   product_data, known_short_cpes_dict, max_full_description)
    if not is_empty_or_only_negative_detection_priorities_or_no_heuristics(all_detected_products):
        all_detected_products += functions_analysis_cpe.get_products_by_cpe(short_o_cpes, short_cpe2product_name,
                                                   product_data, known_short_cpes_dict, max_full_description)

    # Detect the type of vulnerability by searching for a substring
    for source in cve_data_all:
        if data_source_text_classification[source] == "general":
            full_description = source_to_full_description[source]
            all_detected_vuln_types += functions_analysis_text.get_vulnerability_type_from_description(source,
                                                                               full_description,
                                                                               vulnerability_type_data)

    we_have_reliable_vulnerability_type = False
    for vuln_type in all_detected_vuln_types:
        if 'detection_type' in vuln_type:
            if vuln_type['detection_type'] == 'heuristics_ms':
                we_have_reliable_vulnerability_type = True
            if vuln_type['detection_type'] == 'direct':
                we_have_reliable_vulnerability_type = True

    if not we_have_reliable_vulnerability_type:
        for source in cve_data_all:
            if source == "nvd_cve_data_all" or source == "bdu_cve_data_all":
                if 'cwes' in cve_data_all[source][cve_id]:
                    for cwe in cve_data_all[source][cve_id]['cwes']:
                        for vulnerability_type in vulnerability_type_data:
                            if 'cwes' in vulnerability_type_data[vulnerability_type]:
                                if cwe in vulnerability_type_data[vulnerability_type]['cwes']:
                                    all_detected_vuln_types.append({'vuln_type': vulnerability_type,
                                     'source': source,
                                     'description': cve_data_all[source][cve_id]['description'],
                                     'vuln_type_data': vulnerability_type_data[vulnerability_type]
                                     })

    # CWE Debug
    # if all_detected_vuln_types == list():
    #     for source in cve_data_all:
    #         if source == "nvd_cve_data_all":
    #             if 'cwes' in cve_data_all[source][cve_id]:
    #                 for cwe in cve_data_all[source][cve_id]['cwes']:
    #                     if cwe != "NVD-CWE-noinfo":
    #                         print(cwe)

    # Choosing detected_products
    all_detected_products.reverse()
    detection_priority_levels = set()
    for line in all_detected_products:
        if not 'detection_priority' in line['product_data']:
            line['product_data']['detection_priority'] = 0
        detection_priority_levels.add(line['product_data']['detection_priority'])
    max_detection_priority_level = 0
    if detection_priority_levels != set():
        max_detection_priority_level = max(detection_priority_levels)

    prevalence_among_max_detections = set()
    for line in all_detected_products:
        if line['product_data']['detection_priority'] == max_detection_priority_level:
            prevalence_among_max_detections.add(line['product_data']['prevalence'])
    max_prevalence_among_max_detections = 0
    if prevalence_among_max_detections != set():
        max_prevalence_among_max_detections = max(prevalence_among_max_detections)

    detected_products = dict()
    for line in all_detected_products:
        if line['product_data']['detection_priority'] == max_detection_priority_level:
            if line['product_data']['prevalence'] == max_prevalence_among_max_detections:
                detected_products[line['source']] = line

    vuln_types = dict()

    # Choosing vulnerability types
    vuln_type_data_criticality = set()
    for line in all_detected_vuln_types:
        vuln_type_data_criticality.add(line['vuln_type_data']['criticality'])
    if vuln_type_data_criticality != set():
        max_vuln_type_data_criticality = max(vuln_type_data_criticality)
        for line in all_detected_vuln_types:
            if line['vuln_type_data']['criticality'] == max_vuln_type_data_criticality:
                vuln_types[line['source']] = line

    # Looking for one source for vuln_type and product
    one_source = ""
    detected_product_source = ""
    vuln_type_source = ""
    for detected_product_source in detected_products:
        for vuln_type_source in vuln_types:
            if vuln_type_source == detected_product_source:
                one_source = vuln_type_source # source with both detected_product and vuln_type detection
    if one_source != "":
        detected_product_source = one_source
        vuln_type_source = one_source
    else:
        if len(detected_products.keys()) != 0:
            detected_product_source = list(detected_products.keys())[0]
        if len(vuln_types.keys()) != 0:
            vuln_type_source = list(vuln_types.keys())[0]

    cve_data_all['combined_cve_data_all'][cve_id]['description'] = str(source_to_full_description)

    if detected_product_source in detected_products:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = detected_products[detected_product_source][
            'product']
        cve_data_all['combined_cve_data_all'][cve_id]['product_data'] = detected_products[detected_product_source][
            'product_data']
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = "Unknown Product"
        cve_data_all['combined_cve_data_all'][cve_id]['product_data'] = {}

    if vuln_type_source in vuln_types:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = vuln_types[vuln_type_source]['vuln_type']
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = "Unknown Vulnerability Type"

    if one_source != "":
        description = source_to_full_description[one_source]
        cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = "Based on " + re.sub(
            "_cve_data_all", "", one_source).upper() + " data"
        tagged_description = copy.copy(description)
        if 'ranges' in detected_products[one_source]:
            range = detected_products[one_source]['ranges'][0]
            substring = description[range['start']:range['end']]
            if not "<product>" in tagged_description:
                tagged_description = tagged_description.replace(substring, "<product>"  + substring + "</product>")
        if 'ranges' in vuln_types[one_source]:
            if len(vuln_types[one_source]['ranges']) > 0:
                range = vuln_types[one_source]['ranges'][0]
                substring = description[range['start']:range['end']]
                if not "<vulntype>" in tagged_description:
                    tagged_description = tagged_description.replace(substring, "<vulntype>"  + substring + "</vulntype>")
        cve_data_all['combined_cve_data_all'][cve_id]['description'] = tagged_description
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = ""

    return cve_data_all, full_description2detection_results

def get_product_detection_string2product_name(product_data):
    """
    Getting dict for detecting product name based on keywords
    :param product_data:
    :return:
    """
    product_detection_string2product_name = dict()
    for product_name in product_data:
        product_detection_string2product_name[product_name] = product_name
        product_detection_string2product_name[product_name.lower()] = product_name
        for additional_detection_string in product_data[product_name]['additional_detection_strings']:
            product_detection_string2product_name[additional_detection_string] = product_name
            product_detection_string2product_name[additional_detection_string.lower()] = product_name
    return product_detection_string2product_name

def add_combined_cve_data(all_cves, cve_data_all, product_data):
    cve_data_all['combined_cve_data_all'] = dict()
    n = 0
    m = len(all_cves)
    functions_tools.print_debug_message("Combining CVE data...")
    vulnerability_type_data = data_classification_vulnerability_types.vulnerability_type_data
    product_detection_string2product_name = get_product_detection_string2product_name(product_data)
    full_description2detection_results = dict()

    known_short_cpes_dict = functions_analysis_cpe.get_known_short_cpes_dict()
    short_cpe2product_name = functions_analysis_cpe.get_short_cpe2product_name(product_data)
    alternative_name2product_name = functions_analysis_text.get_alternative_name2product_name(product_data)

    for cve_id in all_cves:
        n += 1
        print(str(n) + "/" + str(m) + " " + cve_id)
        file_path_processed = "data/combined/" + cve_id + ".json"
        if not os.path.exists(file_path_processed) or not reuse_combined:
            cve_data_all['combined_cve_data_all'][cve_id] = dict()
            cve_data_all['combined_cve_data_all'][cve_id] = dict()
            cve_data_all, full_description2detection_results = add_combined_cve_data_description_product_vuln_type(
                                                                   cve_data_all, product_data,
                                                                   alternative_name2product_name,
                                                                   known_short_cpes_dict, short_cpe2product_name,
                                                                   product_detection_string2product_name,
                                                                   vulnerability_type_data, cve_id,
                                                                   full_description2detection_results)
            cve_data_all = add_combined_cve_data_basic_severity(cve_data_all, cve_id)
            cve_data_all = add_combined_cve_data_cvss_base_score(cve_data_all, cve_id)
            f = open(file_path_processed, "w")
            f.write(json.dumps(cve_data_all['combined_cve_data_all'][cve_id]))
            f.close()
        else:
            f = open(file_path_processed, "r")
            cve_data_all['combined_cve_data_all'][cve_id] = json.loads(f.read())
            f.close()
    return cve_data_all

def collect_cve_related_data(enabled_data_sources, all_cves, cves_to_exclude, product_data, source_config):
    """
    Collecting vulnerability data from the supported sources and
    combining basic vulnerability data in combined_cve_data_all
    :param all_cves:
    :param rewrite_flag:
    :return:
    """

    # Collecting vulnerability data from the supported sources
    functions_tools.print_debug_message("Counting CVE scores...")
    cve_data_all = dict()
    cve_data_all, cves_to_exclude =  add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all, cves_to_exclude,
                                                     source_config)
    cve_data_all = add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_epss_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_bdu_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_custom_cve_data(enabled_data_sources, all_cves, cve_data_all, source_config)
    cve_data_all = add_combined_cve_data(all_cves, cve_data_all, product_data)
    return cve_data_all, cves_to_exclude